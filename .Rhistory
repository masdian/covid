train2 <- train1
test2 <- test1
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
train2
test2
train <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/train.csv")
test <- read.csv("G:/My Drive/Dian/BRI HACKATON/People Analytic/test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5"
train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
train <- train %>% mutate_all(na_if, "")
train <- droplevels(train)
test <- droplevels(test)
summary(train$year_graduated)
train <- train[, -16]
test <- test[, -16]
train <- train %>%
relocate(Best.Performance, .after = last_col())
train$Best.Performance <- factor(train$Best.Performance,
levels = c(0,1),
labels = c("not_reached", "reached"))
round(prop.table(table(train$Best.Performance))*100, 0)
a <- colSums(is.na(train))
b <- seq(1,length(a))
d <- round(colSums(is.na(train))/nrow(train)*100, 2)
c <- data.frame(peubah = b, banyaknya_NA = a, persen_NA = d)
arrange(c, desc(persen_NA))
train1 <- train[complete.cases(train), ]
test1 <- test
dim(train1)
table(train1$Best.Performance)
round(prop.table(table(train1$Best.Performance)) * 100, 0)
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train1) - 1))) {
tipe[i] <- class(train1[, i])
nama[i] <- names(train1)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train1) - 1), tipe = tipe)
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
# membuat fungsi split berdasarkan kesamaan frequency atau kesamaan lebar selang
pisah <- function(acuan, tujuan, n, method = "length") {
if (method == "freq") {
breaks <- c(-Inf, quantile(acuan, seq(1/n, 1/n*(n-1), by = 1/n)), Inf)
cut(tujuan, breaks)
} else {
selang <- max(acuan) - min(acuan)
breaks <- c(-Inf, seq(min(acuan)+selang/n, max(acuan)-selang/n, by = selang/n), Inf)
cut(tujuan, breaks)
}
}
train2 <- train1
test2 <- test1
train2$age <- pisah(train1$age, train2$age, 4, "freq")
test2$age <- pisah(train1$age, test2$age, 4, "freq")
train2$job_duration_as_permanent_worker <- pisah(train1$job_duration_as_permanent_worker, train2$job_duration_as_permanent_worker, 4, "freq")
test2$job_duration_as_permanent_worker <- pisah(train1$job_duration_as_permanent_worker, test2$job_duration_as_permanent_worker, 4, "freq")
train2$job_duration_from_training <- pisah(train1$job_duration_from_training, train2$job_duration_from_training, 4, "freq")
test2$job_duration_from_training <- pisah(train1$job_duration_from_training, test2$job_duration_from_training, 4, "freq")
train2$branch_rotation <- pisah(train1$branch_rotation, train2$branch_rotation, 4, "freq")
test2$branch_rotation <- pisah(train1$branch_rotation, test2$branch_rotation, 4, "freq")
train2$job_rotation <- pisah(train1$job_rotation, train2$job_rotation, 4, "freq")
test2$job_rotation <- pisah(train1$job_rotation, test2$job_rotation, 4, "freq")
train1[, 25] <- as.factor(train1[, 25])
test1[, 25] <- as.factor(test1[, 25])
train2 <- train2[, -7]
test2 <- test2[, -7]
tipe <- NULL
nama <- NULL
for (i in (1 : (ncol(train2) - 1))) {
tipe[i] <- class(train2[, i])
nama[i] <- names(train2)[i]
}
data.frame(nama = nama, var = 1 : (ncol(train2) - 1), tipe = tipe)
data.frame(nama = nama, var = 1 : (ncol(train2) - 1), tipe = tipe)
preProcess_range_model <- preProcess(train2, method='center')
train2 <- predict(preProcess_range_model, newdata = train2)
test2 <- predict(preProcess_range_model, newdata = test2)
### menjalankan algoritma SMOTE
library(DMwR)
set.seed(1000)
latih <- SMOTE(Best.Performance ~ ., data = train2, k = 5,
perc.over = 200, perc.under = 200)
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
smote_logit <- train(Best.Performance ~.,
data = latih,
method = "glmnet",
trControl = Control)
smote_logit
# Predicting Model on Train Data for Logistic Regression
pred.train <- predict(smote_logit, latih, type = "raw")
summary(pred.train)
pred.test <- predict(smote_logit, test2, type = "raw")
summary(pred.test)
hasil <- data.frame(index = 1 : nrow(test1),
`Best Performance` = pred.test)
write.csv(hasil, "hasil_smote_logit_04.csv")
# Performing Logistic Regression
Control <- trainControl(method = "cv",
number = 5)
# Training neural net
smote_ranger <- train(Best.Performance ~ .,
data = latih,
trControl = Control, method = "ranger")
smote_ranger
# Performing Random Forest
Control <- trainControl(method = "cv",
number = 5)
smote_rf <- train(Best.Performance ~ ., data = latih,
trCtrl = Control,
method = "rf")
smote_rf
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
install.packages(ask = F)
update.packages(ask = F, checkBuilt = T)
dim(iris)
train <- sample(1:150, 0.8*150)
train
latih <- iris[train,]
test <- setdiff(iris, train)
dim(test)
test <- setdiff(iris, latih)
dim(test)
train
setdiff
test <- setdiff(1:150, train)
test
test <- iris[setdiff(1:150, train), ]
test
names(iris)
install.packages('discretization')
library(discretization)
mdlp(latih[, c(1, 5)])
mdlp(latih[, c(1, 5)])$cutp
mdlp(latih[, c(1, 5)])$cutp[[1]]
c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
?mdlp
cutIndex(iris)
?cutIndex
cutIndex(iris[,1], iris[,5])
cutIndex(iris[,3], iris[,5])
c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
cut(a, test[,1])
a <- c(-Inf, mdlp(latih[, c(1, 5)])$cutp[[1]], Inf)
cut(a, test[,1])
a
test[,1]
?cut
cut(a, test[,1])
cut(test[,1], a)
cut(test[,1], a, labels = F)
cut(train[,1], a, labels = F)
cut(latih[,1], a, labels = F)
library(tidyverse)
mtcars
data <- iris
head(data)
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length))
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length))
View(data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length)))
data %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2)
data %>%
group_by(Species) %>%
summarise(rata2 = mean(Sepal.Length))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2)
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2)
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n())
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n()) %>%
group_by(Species) %>%
summarize(sd = sqrt(sum(delta2)/mean(n)))
data %>%
group_by(Species) %>%
summarise(rata2 = mean(Sepal.Length),
sd = sd(Sepal.Length))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n()) %>%
group_by(Species) %>%
summarize(sd = sqrt(sum(delta2)/(mean(n)-1)))
data %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
mutate(rata2 = mean(Sepal.Length),
delta = Sepal.Length - rata2,
delta2 = delta^2,
n = n())
library(tidyverse)
table1
table2
table3
table4
table4a
table4b
dim(table1)
table1
table1 %>%
mutate(rate = case / population * 100)
table1 %>%
mutate(rate = cases / population * 100)
table1 %>%
mutate(rate = cases / population * 10000)
table1 %>%
group_by(year) %>%
summarise(case = sum(cases))
table1 %>%
group_by(year) %>%
summarise(n = sum(cases))
# cases per year
table1 %>%
count(year, wt = cases)
library(ggplot2)
ggplot(table1, aes(year, cases))
ggplot(table1, aes(year, cases)) +
geom_line()
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country))
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), color = "grey50")
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(colour = country))
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
2^1000000000
2^100000
2^100
2^1000
2^10000
setwd("~/Github Publish/Corona/masdian.github.io")
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
confirmed <- read.csv("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv")
death <- read.csv("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv")
recovered <- read.csv("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_recovered_global.csv&filename=time_series_covid19_recovered_global.csv")
class(confirmed)
dim(confirmed)
dim(death)
dim(recovered)
library(tidyverse)
con_data <- confirmed %>%
pivot_longer(-(1:4), names_to = "date", values_to = "confirmed")
dea_data <- death %>%
pivot_longer(-(1:4), names_to = "date", values_to = "death")
rec_data <- recovered %>%
pivot_longer(-(1:4), names_to = "date", values_to = "recovered")
dim(con_data)
dim(dea_data)
dim(rec_data)
data <- full_join(con_data, dea_data)
data <- full_join(data, rec_data)
dim(data)
data
data$date
data$date <- substring(data$date, 2)
data$date
data$date <- gsub("[.]", "-", data$date)
data$date
data$date <- as.Date(data$date, "%m-%d-%y")
db <- data %>%
filter(Country.Region == "Indonesia", date > "2020-02-15") %>%
arrange(date) %>%
mutate(unrecover = confirmed - death - recovered)
db
dim(db)
View(db)
db$daily_con <- 0
for (i in 1 : nrow(db)) {
if (i == 1) {
db$daily_con[i] <- 0
} else {
db$daily_con[i] <- db$confirmed[i] - db$confirmed[i-1]
}
}
db$daily_dea <- 0
for (i in 1 : nrow(db)) {
if (i == 1) {
db$daily_dea[i] <- 0
} else {
db$daily_dea[i] <- db$death[i] - db$death[i - 1]
}
}
db$daily_rec <- 0
for (i in 1 : nrow(db)) {
if (i == 1) {
db$daily_rec[i] <- 0
} else {
db$daily_rec[i] <- db$recovered[i] - db$recovered[i - 1]
}
}
db1 <- db %>% filter(date == max(date))
db1
db
dim(db)
dw <- data %>%
group_by(date) %>%
summarize(confirmed = sum(confirmed, na.rm = T),
death =  sum(death, na.rm = T),
recovered = sum(recovered, na.rm = T))
dim(dw)
summary(dw)
dw$daily_con <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_con[i] <- 0
} else {
dw$daily_con[i] <- dw$confirmed[i] - dw$confirmed[i-1]
}
}
dw$daily_dea <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_dea[i] <- 0
} else {
dw$daily_dea[i] <- dw$death[i] - dw$death[i - 1]
}
}
dw$daily_rec <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_rec[i] <- 0
} else {
dw$daily_rec[i] <- dw$recovered[i] - dw$recovered[i - 1]
}
}
dw
summary(dw)
View(dw)
data[data$date="2020-12-14",]
data[data$date=="2020-12-14",]
dim(data)
names(data)
data[data$date=="2020-12-14",]
data %>% group_by(date) %>% summarize(rec = sum(recovered))
data %>% group_by(date) %>% summarize(rec = sum(recovered, na.rm = T))
data %>% group_by(date) %>% summarize(rec = sum(recovered, na.rm = T), n = n())
View(data %>% group_by(date) %>% summarize(rec = sum(recovered, na.rm = T), n = n()))
data %>% filter(date in c("2020-12-13",2020-12-14))
data %>% filter(date == "2020-12-13" | date == "2020-12-14"))
data %>% filter(date == "2020-12-13" | date == "2020-12-14"))
data %>% filter(date == "2020-12-13" | date == "2020-12-14")
View(data %>% filter(date == "2020-12-13" | date == "2020-12-14"))
data %>% filter(date == "2020-12-13" | date == "2020-12-14") %>% group_by(date) %>% summarize(rec = sum(recovered, na.rm = T))
x <- data %>%
group_by(Country.Region, date) %>%
summarize(rec = sum(recovered, na.rm = T))
x
x <- data %>%
group_by(Country.Region, date) %>%
summarize(rec = sum(recovered, na.rm = T)) %>%
filter(date == "2020-12-13" | date = "2020-12-14")
x <- data %>%
group_by(Country.Region, date) %>%
summarize(rec = sum(recovered, na.rm = T)) %>%
filter(date == "2020-12-13" | date == "2020-12-14")
x
x %>%
pivot_wider(names_from = date, values_from = rec)
x <- x %>%
pivot_wider(names_from = date, values_from = rec)
x$selisih <- x[,3] - x[,2]
arrange(x, desc(selisih))
arrange(x, selisih)
arrange(x, selisih)
data %>%
filter(Country.Region=="US" & date == "2020-12-14")
arrange(x, selisih)
data %>%
filter(Country.Region=="US" & date == "2020-12-14")
dw$daily_rec <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_rec[i] <- 0
} else if ((dw$recovered[i] - dw$recovered[i - 1]) < 0) {
dw$daily_rec[i] <- dw$recovered[i - 1]
} else {
dw$daily_rec[i] <- dw$recovered[i] - dw$recovered[i - 1]
}
}
setwd("~/Github Publish/Corona/masdian.github.io")
data
db1 <- db %>% filter(date == max(date))
db1
db1$confirmed
db1$recovered
dw <- data %>%
group_by(date) %>%
summarize(confirmed = sum(confirmed, na.rm = T),
death =  sum(death, na.rm = T),
recovered = sum(recovered, na.rm = T))
dw$daily_con <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_con[i] <- 0
} else {
dw$daily_con[i] <- dw$confirmed[i] - dw$confirmed[i-1]
}
}
dw$daily_dea <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_dea[i] <- 0
} else {
dw$daily_dea[i] <- dw$death[i] - dw$death[i - 1]
}
}
dw$daily_rec <- 0
for (i in 1 : nrow(dw)) {
if (i == 1) {
dw$daily_rec[i] <- 0
} else if ((dw$recovered[i] - dw$recovered[i - 1]) < 0) {
dw$daily_rec[i] <- dw$recovered[i - 1]
} else {
dw$daily_rec[i] <- dw$recovered[i] - dw$recovered[i - 1]
}
}
dim(dw)
dw
dw[dw$daily_rec == max(dw$daily_rec), ]
dw[dw$date>"2020-12-13",]
setwd("~/Github Publish/Corona/masdian.github.io")
